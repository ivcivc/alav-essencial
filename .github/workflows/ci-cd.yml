# Pipeline CI/CD para Cl√≠nica Essencial
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: clinica-essencial

jobs:
  # Job de Testes
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Testes Backend
    - name: Instalar depend√™ncias Backend
      run: |
        cd backend
        npm ci

    - name: Setup Prisma
      run: |
        cd backend
        npx prisma generate
        npx prisma db push
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Executar testes Backend
      run: |
        cd backend
        npm run test:all
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test-secret-key
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    # Testes Frontend
    - name: Instalar depend√™ncias Frontend
      run: |
        cd frontend
        npm ci

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Executar testes Frontend
      run: |
        cd frontend
        npm run test:run

    # Testes E2E (s√≥ na main)
    - name: Instalar Playwright
      if: github.ref == 'refs/heads/main'
      run: |
        cd frontend
        npx playwright install --with-deps

    - name: Executar testes E2E
      if: github.ref == 'refs/heads/main'
      run: |
        cd frontend
        npm run test:e2e
      env:
        CI: true

    - name: Upload E2E results
      if: failure() && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results
        path: frontend/test-results/
        retention-days: 7

  # Job de Build e Deploy
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build e Push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build e Push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de Security Scan
  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de Deploy para produ√ß√£o (manual)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploy para produ√ß√£o seria executado aqui"
        echo "Configurar SSH, copiar docker-compose.prod.yml, etc."
        # Comandos de deploy real seriam inseridos aqui
        # ssh user@server "cd /app && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"

    - name: Health Check
      run: |
        echo "üè• Executando health check p√≥s-deploy"
        # curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

    - name: Notificar Slack/Discord
      if: always()
      run: |
        echo "üì¢ Notifica√ß√£o de deploy enviada"
        # Integra√ß√£o com Slack/Discord seria implementada aqui

  # Job de Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run Performance Tests
      run: |
        echo "‚ö° Executando testes de performance"
        # k6 run performance-tests/api-load-test.js

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results/
        retention-days: 30
