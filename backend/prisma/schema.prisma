generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Patient {
  id               String           @id @default(cuid())
  fullName         String
  cpf              String           @unique
  birthDate        DateTime
  whatsapp         String?
  phone            String?
  email            String?
  street           String?
  number           String?
  complement       String?
  neighborhood     String?
  city             String?
  state            String?
  zipCode          String?
  observations     String?
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  appointments     Appointment[]
  financialEntries FinancialEntry[]

  @@map("patients")
}

model Partner {
  id                 String                @id @default(cuid())
  fullName           String
  document           String                @unique
  phone              String
  email              String
  street             String?
  number             String?
  complement         String?
  neighborhood       String?
  city               String?
  state              String?
  zipCode            String?
  bank               String?
  agency             String?
  account            String?
  pix                String?
  partnershipType    PartnershipType
  subleaseAmount     Decimal?
  subleasePaymentDay Int?
  percentageAmount   Decimal?
  percentageRate     Decimal?
  active             Boolean               @default(true)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  appointments       Appointment[]
  financialEntries   FinancialEntry[]
  availability       PartnerAvailability[]
  blockedDates       PartnerBlockedDate[]
  partnerServices    PartnerService[]

  @@map("partners")
}

model PartnerAvailability {
  id         String   @id @default(cuid())
  partnerId  String
  dayOfWeek  Int
  startTime  String
  endTime    String
  breakStart String?
  breakEnd   String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  partner    Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("partner_availability")
}

model PartnerBlockedDate {
  id          String   @id @default(cuid())
  partnerId   String
  blockedDate DateTime @db.Date
  startTime   String?
  endTime     String?
  reason      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerId, blockedDate, startTime, endTime])
  @@map("partner_blocked_dates")
}

model Room {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  resources           String[]
  active              Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  appointments        Appointment[]
  productServiceRooms ProductServiceRoom[]

  @@map("rooms")
}

model Category {
  id              String           @id @default(cuid())
  name            String
  type            ServiceType
  description     String?
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productServices ProductService[]

  @@map("categories")
}

model ProductService {
  id                  String               @id @default(cuid())
  name                String
  type                ServiceType
  categoryId          String
  internalCode        String?
  description         String?
  salePrice           Decimal
  costPrice           Decimal?
  partnerPrice        Decimal?
  durationMinutes     Int?
  availableForBooking Boolean              @default(true)
  requiresSpecialPrep Boolean              @default(false)
  specialPrepDetails  String?
  stockLevel          Int?
  minStockLevel       Int?
  active              Boolean              @default(true)
  observations        String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  appointments        Appointment[]
  partnerServices     PartnerService[]
  productServiceRooms ProductServiceRoom[]
  category            Category             @relation(fields: [categoryId], references: [id])

  @@map("product_services")
}

model ProductServiceRoom {
  id               String         @id @default(cuid())
  productServiceId String
  roomId           String
  createdAt        DateTime       @default(now())
  productService   ProductService @relation(fields: [productServiceId], references: [id], onDelete: Cascade)
  room             Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([productServiceId, roomId])
  @@map("product_service_rooms")
}

model PartnerService {
  id               String         @id @default(cuid())
  partnerId        String
  productServiceId String
  createdAt        DateTime       @default(now())
  partner          Partner        @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  productService   ProductService @relation(fields: [productServiceId], references: [id], onDelete: Cascade)

  @@unique([partnerId, productServiceId])
  @@map("partner_services")
}

model Appointment {
  id                    String                 @id @default(cuid())
  patientId             String
  partnerId             String
  productServiceId      String
  roomId                String?
  date                  DateTime
  startTime             String
  endTime               String
  type                  AppointmentType        @default(CONSULTATION)
  status                AppointmentStatus      @default(SCHEDULED)
  isEncaixe             Boolean                @default(false)
  observations          String?
  checkIn               DateTime?
  checkOut              DateTime?
  cancellationReason    String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  partner               Partner                @relation(fields: [partnerId], references: [id])
  patient               Patient                @relation(fields: [patientId], references: [id])
  productService        ProductService         @relation(fields: [productServiceId], references: [id])
  room                  Room?                  @relation(fields: [roomId], references: [id])
  financialEntries      FinancialEntry[]
  notificationLogs      NotificationLog[]
  notificationSchedules NotificationSchedule[]

  @@map("appointments")
}

model NotificationConfiguration {
  id                   String   @id @default(cuid())
  enabled              Boolean  @default(true)
  defaultChannel       String   @default("whatsapp")
  firstReminderDays    Int      @default(3)
  secondReminderDays   Int      @default(1)
  thirdReminderHours   Int      @default(2)
  whatsappEnabled      Boolean  @default(true)
  smsEnabled           Boolean  @default(true)
  emailEnabled         Boolean  @default(true)
  retryAttempts        Int      @default(3)
  retryIntervalMinutes Int      @default(30)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("notification_configuration")
}

model NotificationTemplate {
  id                    String                   @id @default(cuid())
  name                  String
  type                  NotificationReminderType
  channel               NotificationChannel
  subject               String?
  content               String
  variables             Json
  active                Boolean                  @default(true)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  notificationSchedules NotificationSchedule[]

  @@map("notification_templates")
}

model NotificationSchedule {
  id            String               @id @default(cuid())
  appointmentId String
  templateId    String
  scheduledFor  DateTime
  status        NotificationStatus   @default(PENDING)
  channel       NotificationChannel
  retryCount    Int                  @default(0)
  lastAttempt   DateTime?
  errorMessage  String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  appointment   Appointment          @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  template      NotificationTemplate @relation(fields: [templateId], references: [id])

  @@map("notification_schedules")
}

model NotificationLog {
  id            String              @id @default(cuid())
  appointmentId String
  channel       NotificationChannel
  recipient     String
  content       String
  subject       String?
  status        NotificationStatus
  errorMessage  String?
  providerData  Json?
  deliveredAt   DateTime?
  readAt        DateTime?
  sentAt        DateTime            @default(now())
  appointment   Appointment         @relation(fields: [appointmentId], references: [id])

  @@map("notification_logs")
}

model BankAccount {
  id               String           @id @default(cuid())
  name             String
  bank             String
  accountType      BankAccountType
  agency           String?
  accountNumber    String?
  pixKey           String?
  initialBalance   Decimal          @default(0) @db.Decimal(10, 2)
  currentBalance   Decimal          @default(0) @db.Decimal(10, 2)
  active           Boolean          @default(true)
  color            String           @default("#3B82F6")
  description      String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  financialEntries FinancialEntry[]

  @@map("bank_accounts")
}

model FinancialEntry {
  id            String               @id @default(cuid())
  bankAccountId String
  type          FinancialEntryType
  category      String
  subcategory   String?
  description   String
  amount        Decimal              @db.Decimal(10, 2)
  dueDate       DateTime
  paidDate      DateTime?
  status        FinancialEntryStatus @default(PENDING)
  paymentMethod PaymentMethod?
  notes         String?
  referenceId   String?
  referenceType String?
  partnerId     String?
  patientId     String?
  appointmentId String?
  recurring     Boolean              @default(false)
  parentEntryId String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  appointment   Appointment?         @relation(fields: [appointmentId], references: [id])
  bankAccount   BankAccount          @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  parentEntry   FinancialEntry?      @relation("RecurringEntries", fields: [parentEntryId], references: [id])
  childEntries  FinancialEntry[]     @relation("RecurringEntries")
  partner       Partner?             @relation(fields: [partnerId], references: [id])
  patient       Patient?             @relation(fields: [patientId], references: [id])

  @@map("financial_entries")
}

enum UserRole {
  ADMIN
  USER
}

enum PartnershipType {
  SUBLEASE
  PERCENTAGE
  PERCENTAGE_WITH_PRODUCTS
}

enum ServiceType {
  PRODUCT
  SERVICE
}

enum AppointmentType {
  CONSULTATION
  EXAM
  PROCEDURE
  RETURN
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NotificationChannel {
  WHATSAPP
  SMS
  EMAIL
}

enum NotificationReminderType {
  FIRST_REMINDER
  SECOND_REMINDER
  THIRD_REMINDER
  IMMEDIATE
}

enum NotificationStatus {
  PENDING
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum BankAccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CASH
  CREDIT_CARD
  PIX
}

enum FinancialEntryType {
  INCOME
  EXPENSE
}

enum FinancialEntryStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIAL
}

enum PaymentMethod {
  CASH
  DEBIT_CARD
  CREDIT_CARD
  PIX
  BANK_TRANSFER
  CHECK
  VOUCHER
}

model ClinicSettings {
  id                     String   @id @default(cuid())
  name                   String   @default("Clínica Essencial")
  hours                  Json     // Array de horários por dia da semana
  allowWeekendBookings   Boolean  @default(false)
  advanceBookingDays     Int      @default(30)
  minBookingHours        Int      @default(2)
  maxBookingDays         Int      @default(60)
  allowCancelledMovement Boolean  @default(false)
  allowCompletedMovement Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("clinic_settings")
}
